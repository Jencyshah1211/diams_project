-- Creating the users table
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    email VARCHAR(255) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    user_type ENUM('buyer', 'jeweller', 'supplier') NOT NULL,
    mobile_number VARCHAR(20),
    country_code VARCHAR(10),
    is_active BOOLEAN DEFAULT TRUE,
    updated_at DATETIME,
    created_at DATETIME
);

ALTER TABLE users
ADD reset_token VARCHAR(255),
ADD token_expiry DATETIME;

-- Creating the buyers table
CREATE TABLE buyers (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    address VARCHAR(255),
    country VARCHAR(100),
    state VARCHAR(100),
    city VARCHAR(100),
    pincode VARCHAR(20),
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Creating the dealers table
CREATE TABLE dealers (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    company_name VARCHAR(255) NOT NULL,
    company_email VARCHAR(255),
    company_mobile VARCHAR(20),
    company_country_code VARCHAR(10),
    address1 VARCHAR(255),
    address2 VARCHAR(255),
    country VARCHAR(100),
    state VARCHAR(100),
    city VARCHAR(100),
    pincode VARCHAR(20),
    company_type VARCHAR(100),
    nature_of_business VARCHAR(255),
    license_number VARCHAR(100),
    license_document VARCHAR(255),
    iec VARCHAR(100),
    iec_document VARCHAR(255),
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    passport_number VARCHAR(50),
    passport_front VARCHAR(255),
    passport_back VARCHAR(255),
    dob DATE,
    driving_license_number VARCHAR(100),
    driving_license VARCHAR(255),
    updated_at DATETIME,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Creating the suppliers table
CREATE TABLE suppliers (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    company_name VARCHAR(255) NOT NULL,
    inventory_type VARCHAR(100),
    address1 VARCHAR(255),
    address2 VARCHAR(255),
    country VARCHAR(100),
    state VARCHAR(100),
    city VARCHAR(100),
    pincode VARCHAR(20),
    company_type VARCHAR(100),
    nature_of_business VARCHAR(255),
    business_license_number VARCHAR(100),
    business_license_document VARCHAR(255),
    iec VARCHAR(100),
    iec_documents VARCHAR(255),
    bank_name VARCHAR(100),
    branch_name VARCHAR(100),
    bank_account_number VARCHAR(100),
    account_type VARCHAR(50),
    ifsc_code VARCHAR(50),
    swift_code VARCHAR(50),
    supervisor_name VARCHAR(100),
    supervisor_email VARCHAR(255),
    supervisor_mobile VARCHAR(20),
    supervisor_country_code VARCHAR(10),
    updated_at DATETIME,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- create diamonds table
CREATE TABLE diamonds (
    diamond_id BIGINT PRIMARY KEY AUTO_INCREMENT, -- Auto-incremented primary key
    diams_id VARCHAR(50) UNIQUE NOT NULL, -- DIAM'S ID (platform-generated, e.g., UUID)
    supplier_id INT NOT NULL, -- Links to suppliers.id
    stock_number VARCHAR(50) NOT NULL,-- STONE ID (e.g., N0130411), unique per supplier
    diamond_type ENUM('NATURAL', 'LAB GROWN') NOT NULL, -- NAT/LAB (limited to NATURAL, LAB GROWN)
    stone_location VARCHAR(50), -- STONE LOCATION (e.g., Mumbai)
    shape VARCHAR(50) NOT NULL, -- SHAPE (e.g., CUSHION)
    carat DECIMAL(5,2) NOT NULL, -- SIZE (e.g., 0.33)
    color VARCHAR(10) NOT NULL, -- COLOR (e.g., E)
    clarity VARCHAR(10) NOT NULL, -- CLARITY (e.g., IF)
    cut VARCHAR(50) NOT NULL, -- CUT (e.g., VG)
    polish VARCHAR(20) NOT NULL, -- POL (e.g., VG)
    symmetry VARCHAR(20) NOT NULL, -- SYMM (e.g., VG)
    fluorescence VARCHAR(50) NOT NULL, -- FLUOR (e.g., NONE)
    length DECIMAL(5,2) NOT NULL, -- LENGTH (e.g., 4.06)
    width DECIMAL(5,2) NOT NULL, -- WIDTH (e.g., 3.88)
    lw_ratio DECIMAL(5,2), -- L/W RATIO (e.g., 1.05)
    rap_price DECIMAL(10,2), -- RAP (e.g., 2200)
    discount DECIMAL(5,2), -- DISC (e.g., 52.1)
    price_per_carat DECIMAL(10,2), -- PRICE($/ct) (e.g., 1053.8)
    amount DECIMAL(10,2) NOT NULL, -- AMT($) (e.g., 347.75)
    exchange_rate DECIMAL(5,2), -- $ RATE (e.g., 86)
    inr_value DECIMAL(10,2), -- INR VALUE (e.g., 29906.5)
    markup_factor DECIMAL(5,2), -- DIAM'S MARK UP (e.g., 1.5)
    wholesale_price DECIMAL(10,2), -- DIAM'S PRICE (e.g., 44860)
    is_certified BOOLEAN NOT NULL, -- CERTIFIED (e.g., YES → TRUE)
    certificate_issuer VARCHAR(50), -- LAB (e.g., GIA)
    certificate_number VARCHAR(50), -- REPORT NO. (e.g., 2426691798)
    has_opens BOOLEAN NOT NULL, -- OPENS (e.g., NO → FALSE)
    black_inclusion VARCHAR(10) NOT NULL, -- BLACK INCLUSION (e.g., BT1)
    is_natural BOOLEAN NOT NULL, -- NATURAL (e.g., NO → FALSE)
    image_url VARCHAR(255) NOT NULL, -- IMAGE (e.g., .JPG)
    video_url VARCHAR(255) NOT NULL, -- VIDEO (e.g., .MP4)
    remarks TEXT, -- REMAKRS (e.g., empty)
    stock_status ENUM('in_stock', 'out_of_stock', 'pre_order') NOT NULL DEFAULT 'in_stock', -- Stock status
    
    created_at DATETIME, -- Set to current date-time (e.g., 2025-07-09 10:20:00 IST)
    updated_at DATETIME ,
    FOREIGN KEY (supplier_id) REFERENCES suppliers(id) ON DELETE CASCADE,
    CONSTRAINT unique_stock_number_per_supplier UNIQUE (stock_number, supplier_id) -- Ensure uniqueness per supplier
);


-- wishlist table
CREATE TABLE wishlist (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    diamond_id BIGINT NOT NULL,
    added_at DATETIME,
    CONSTRAINT fk_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT fk_diamond FOREIGN KEY (diamond_id) REFERENCES diamonds(diamond_id) ON DELETE CASCADE,
    CONSTRAINT unique_user_diamond UNIQUE (user_id, diamond_id),
    INDEX idx_user_id (user_id),
    INDEX idx_diamond_id (diamond_id)
);

-- cart table
CREATE TABLE cart (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    user_id INT, -- Nullable for guest users
    session_id VARCHAR(36), -- For guest carts
    diamond_id BIGINT NOT NULL,
    quantity INT NOT NULL DEFAULT 1,
    added_at DATETIME,
    CONSTRAINT fk_cart_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT fk_cart_diamond FOREIGN KEY (diamond_id) REFERENCES diamonds(diamond_id) ON DELETE CASCADE,
    CONSTRAINT unique_cart_item UNIQUE (user_id, session_id, diamond_id),
    INDEX idx_user_id (user_id),
    INDEX idx_session_id (session_id),
    INDEX idx_diamond_id (diamond_id)
);
